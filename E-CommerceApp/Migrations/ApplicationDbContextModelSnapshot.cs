// <auto-generated />
using System;
using E_CommerceApp.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_CommerceApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_CommerceApp.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            ProductId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 3,
                            ProductId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 5,
                            OrderId = 3,
                            ProductId = 5,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("E_CommerceApp.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerEmail = "alice@example.com",
                            CustomerName = "Alice Johnson",
                            OrderDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CustomerEmail = "bob@example.com",
                            CustomerName = "Bob Smith",
                            OrderDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CustomerEmail = "carol@example.com",
                            CustomerName = "Carol Martinez",
                            OrderDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("E_CommerceApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Ergonomic wireless mouse with USB receiver.",
                            ImageUrl = "/images/mouse.jpg",
                            Name = "Wireless Mouse",
                            Price = 19.99m
                        },
                        new
                        {
                            Id = 2,
                            Description = "RGB mechanical keyboard with blue switches.",
                            ImageUrl = "/images/keyboard.jpg",
                            Name = "Mechanical Keyboard",
                            Price = 59.99m
                        },
                        new
                        {
                            Id = 3,
                            Description = "1080p webcam with microphone for streaming.",
                            ImageUrl = "/images/webcam.jpg",
                            Name = "HD Webcam",
                            Price = 39.99m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Adjustable aluminum laptop stand.",
                            ImageUrl = "/images/laptopstand.jpg",
                            Name = "Laptop Stand",
                            Price = 29.99m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Multiport hub with HDMI, USB, and SD card reader.",
                            ImageUrl = "/images/hub.jpg",
                            Name = "USB-C Hub",
                            Price = 34.99m
                        });
                });

            modelBuilder.Entity("E_CommerceApp.Models.CartItem", b =>
                {
                    b.HasOne("E_CommerceApp.Models.Order", "Order")
                        .WithMany("CartItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("E_CommerceApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_CommerceApp.Models.Order", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
